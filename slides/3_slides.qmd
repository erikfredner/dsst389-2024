---
title: "`tidyverse` Review"
subtitle: "DSST389: Advanced Data Science"
author: "Erik Fredner"
institute: "University of Richmond"
date: today
execute:
  echo: true
  warning: false
  message: false
format:
  revealjs:
    logo: "images/by-sa.png"
    footer: "https://fredner.org"
    embed-resources: true
    scrollable: true
    toc: true
    toc-depth: 2
    slide-level: 3
    slide-number: true
    preview-links: auto
editor_options:
  markdown:
    wrap: 72
---

## Markdown and Quarto review

<https://PollEv.com/fredner>

### Summary

- Markdown is everywhere in data science
- You will need these features to create high-quality reports
- Learning these features not only allows you to create documents, but also websites and data dashboards

## Reading review

In groups of 2 or 3, share the most important thing that you either remembered from 289 or that was clarified while reading. Use your notes.

## `tidyverse` overview

### What is the `tidyverse`?

- The `tidyverse` is a collection of R packages designed for data science.
  - Including `ggplot2`, `dplyr`, and `readr`.
- `tidyverse` simplifies many operations relative to **base R**
  - See [the field guide to base R](https://r4ds.hadley.nz/base-r)
- `tidyverse` style emphasizes
  - tidy data structures
  - data pipelines (`|>`)

### Why use the `tidyverse`?

- Easier to read than base R
- Easier to write than base R
- More consistent than base R

### Pipeline (`|>`) example

```{r}
# base R (dense)
abs(tan(log(exp(8), base = 2)))

# base R (intermediate objects)
temp <- exp(8)
temp <- log(temp, base = 2)
temp <- tan(temp)
temp <- abs(temp)
temp

# tidyverse pipeline
8 |>
  exp() |>
  log(base = 2) |>
  tan() |>
  abs()
```

### Why not use the `magrittr` pipe (`%>%`)?

- The `|>` pipe is now part of the R language; `magrittr` is an external package
- `|>` usually runs faster than `%>%`
- `|>` requires explicit arguments, which improves clarity

### What makes data tidy?

1. Each variable is a column; each column is a variable.
2. Each observation is a row; each row is an observation.
3. Each value is a cell; each cell is a single value.
  
See the [figure](https://r4ds.hadley.nz/data-tidy.html#fig-tidy-structure).

### Importance of tidy data

Since `tidyverse` functions assume that data will be tidy, applying them to non-tidy data can yield misleading or incorrect results.

## Rules for 389

- Tidy your data
- Use the base R pipe (`|>`)
- Use `<-` to assign outputs to objects
- Use `snake_case` names
- Use `tidyverse` instead of base R whenever possible
  - e.g., `as_factor()` is `tidyverse`; `as.factor()` is base
- Follow the [`tidyverse` style guide](https://style.tidyverse.org/)
- Undocumented code is incomplete code

## Review of fundamentals

### Clear workspace

This is equivalent to clicking the ðŸ§¹ icon in the Environment pane and restarting R.

```{r}
#| eval: false
if (interactive()) {
  rstudioapi::restartSession(clean = TRUE)
}
```

### Import libraries

In 289, importing libraries was usually done for you.

```{r}
#| warning: true

library(tidyverse)
library(ggrepel)
```

### Import data

In 289, importing data was usually done for you.

```{r}
pokemon <- read_csv("../data/pokemon.csv")

pokemon |>
  select(name, type_1, speed, attack, stat_total)
```

### Setting plot themes

In 289, plot themes were usually set for you.

You can see the list of `ggplot` themes [here](https://ggplot2-book.org/themes#sec-themes).

```{r}
theme_set(theme_minimal())
```

### `ggplot`

```{r}
#| output-location: slide
#| code-line-numbers: "1-7|9|10|11|12|13|14-20"

pokemon_sample <- pokemon |>
  filter(
    generation == 1,
    speed >= 80,
    stat_total >= 400,
    type_1 %in% c("Fire", "Water", "Grass")
  )

pokemon_sample |>
  ggplot(aes(x = attack, y = speed)) +
  geom_point(aes(color = type_1, size = stat_total)) +
  geom_label_repel(aes(label = name, color = type_1)) +
  scale_color_manual(values = c("darkred", "darkblue", "darkgreen")) +
  labs(
    title = "Generation 1 PokÃ©mon (sample)",
    x = "Attack",
    y = "Speed",
    color = "Type 1",
    size = "Stat Total"
  )
```

### Sorting, slicing, selecting

```{r}
pokemon_sample |>
  arrange(desc(stat_total)) |>
  slice_head(n = 5) |>
  select(pokedex_no, name, type_1, stat_total)
```

### Summarizing

```{r}
pokemon_sample |>
  summarize(
    min_stat = min(stat_total),
    med_stat = median(stat_total),
    mean_stat = round(mean(stat_total), 1),
    max_stat = max(stat_total)
  )
```

### Summarizing by group

```{r}
pokemon_sample |>
  group_by(type_1) |>
  summarize(
    avg_speed = round(mean(speed), 1),
    avg_attack = round(mean(attack), 1),
    avg_stat_total = round(mean(stat_total), 1)
  )
```

### Grouping, filtering, extremes

```{r}
pokemon_sample |>
  group_by(type_1) |>
  filter(speed == max(speed)) |>
  arrange(desc(speed)) |>
  select(name, type_1, speed)
```

### Counting

```{r}
# preferred for simplicity
pokemon_sample |>
  count(type_1, type_2)
```

```{r}
pokemon_sample |>
  group_by(type_1, type_2) |>
  summarize(n = n())
```

### Joins: Tables

```{r}
#| echo: false

table1 <- tibble(
  artist = c(
    "Taylor Swift", "Drake", "Adele",
    "Radiohead", "The Smile"
  ),
  song = c(
    "Blank Space", "Hotline Bling", "Easy On Me",
    "The National Anthem", "Thin Thing"
  ),
  star_rating = c(2, 3, 4, 5, 5)
)

table2 <- tibble(
  artist = c(
    "Taylor Swift", "Drake", "Adele",
    "Radiohead", "The Smile"
  ),
  lead_performer = c(
    "Taylor Swift", "Drake", "Adele",
    "Thom Yorke", "Thom Yorke"
  ),
  genre = c("Pop", "Hip-Hop", "Pop", "Rock", "Rock")
)
```

```{r}
table1

table2
```

### Joins: `left_join`

```{r}
table1 |>
  left_join(table2, by = "artist")
```

### Filter joins

```{r}
table2 |>
  semi_join(table1, join_by(lead_performer == artist))
```

```{r}
table2 |>
  anti_join(table1, join_by(lead_performer == artist))
```

### Pivot longer: table

```{r}
#| echo: false

flower <- c(
  "Black-Eyed Susan", "Virginia Bluebell", "Eastern Red Columbine"
)
height_day_1 <- c(10, 8, 6)
height_day_2 <- c(11, 10, 9)
height_day_3 <- c(12, 12, 12)

flowers <- tibble(
  flower,
  height_day_1,
  height_day_2,
  height_day_3
)
```

```{r}
flowers
```

### Pivot longer (i.e., to tidy data)

```{r}
flowers |>
  pivot_longer(
    cols = -flower, # i.e., every column NOT flower
    names_to = "day",
    names_prefix = "height_day_",
    names_transform = as.integer,
    values_to = "height"
  )
```

### Unique values with `distinct`

```{r}
table2 |>
  distinct(lead_performer)
```

### Calculated columns with `mutate`

```{r}
pokemon |>
  mutate(hp_proportion = hp / stat_total) |>
  slice_sample(n = 5) |>
  select(name, hp, stat_total, hp_proportion)
```

### `mutate` and `if_else`

```{r}
pokemon |>
  mutate(high_stats = if_else(stat_total >= 500, TRUE, FALSE)) |>
  slice_sample(n = 5) |>
  select(name, stat_total, high_stats)
```

### Adding columns with `mutate` and `case_when`

```{r}
#| output-location: slide


defense_stats <- pokemon |>
  summarize(
    mean_defense = mean(defense, na.rm = TRUE),
    sd_defense = sd(defense, na.rm = TRUE)
  )

mean_defense <- defense_stats |> pull(mean_defense)
sd_defense <- defense_stats |> pull(sd_defense)

pokemon |>
  mutate(
    defense_group = case_when(
      defense < (mean_defense - sd_defense) ~ "below average",
      defense >= (mean_defense - sd_defense) &
        defense <= (mean_defense + sd_defense) ~ "average",
      defense > (mean_defense + sd_defense) ~ "above average"
    )
  ) |>
  select(name, defense, defense_group)
```

### Plotting with those categories

```{r}
#| output-location: slide


pokemon |>
  mutate(
    defense_group = case_when(
      defense < (mean_defense - sd_defense) ~ "below average",
      defense >= (mean_defense - sd_defense) &
        defense <= (mean_defense + sd_defense) ~ "average",
      defense > (mean_defense + sd_defense) ~ "above average"
    ) |>
      # to follow logical rather than alphabetical order:
      fct_relevel("below average", "average", "above average")
  ) |>
  ggplot(aes(defense, hp, color = defense_group)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", se = TRUE) +
  scale_color_viridis_d()
```

### Binning continuous values with `cut`

```{r}
#| output-location: slide
pokemon |>
  mutate(def_bin = cut(
    defense,
    breaks = 3,
    labels = c("low", "medium", "high")
  )) |>
  ggplot(aes(defense, hp, color = def_bin)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", se = TRUE) +
  scale_color_viridis_d()
```

### Numbers `as_factor`

```{r}
#| output-location: slide
pokemon |>
  filter(between(stat_total, 400, 800)) |>
  mutate(generation = as_factor(generation)) |>
  ggplot(aes(x = generation, y = stat_total)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(width = 0.2, alpha = 0.1, color = "darkblue")
```

### Without `as_factor`

```{r}
pokemon |>
  filter(between(stat_total, 400, 800)) |>
  # mutate(generation = as_factor(generation)) |>
  ggplot(aes(x = generation, y = stat_total)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(width = 0.2, alpha = 0.1, color = "darkblue")
```

### Linear models and faceted plots

```{r}
#| output-location: slide

pokemon |>
  filter(type_1 %in% c("Bug", "Dragon", "Normal", "Water")) |> 
  ggplot(aes(defense, hp)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", se = TRUE) +
  facet_wrap(~type_1)
```

### Density plots

A helpful [video](https://www.youtube.com/watch?v=R6_LR-f6Tt4) to review.

```{r}
#| output-location: slide

pokemon |>
  filter(type_1 %in% c("Bug", "Dragon", "Normal", "Water")) |> 
  ggplot(aes(stat_total, fill = type_1)) +
  geom_density(alpha = 0.5) +
  scale_fill_brewer(palette = "Dark2") +
  facet_wrap(~type_1)
```

### 289 topics we are not reviewing (yet)

- manual data collection
- data feminism
- `datetime`
- geospatial data
- `broom`, `tidy()`, and `augment()`

## Practice

### Make your 389 folders

If you have not done so already

```{r}
#| eval: false

dir.create("dsst389")
dir.create(file.path("dsst389", "data"))
dir.create(file.path("dsst389", "nb"))
```

### Download the data and the blank notebook

Blackboard > Course Documents > 03
