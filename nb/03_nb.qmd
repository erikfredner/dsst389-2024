---
title: "`tidyverse` Review"
subtitle: "DSST389: Advanced Data Science"
author: "Erik Fredner"
institute: "University of Richmond"
date: today
execute:
  echo: true
format:
  html:
    anchor-sections: true
    code-tools: false
    embed-resources: true
    link-external-icon: true
    link-external-newwindow: true
    number-sections: true
    smooth-scroll: true
    toc: true
editor:
  markdown:
    wrap: 72
---

## Environment

Run the following in a code chunk to clean up your environment:

```r
if (interactive()) {
  rstudioapi::restartSession(clean = TRUE)
}
```

Then, import needed libraries:

```{r}
#| label: libraries

library(tidyverse)
library(ggrepel)
theme_set(theme_minimal())
```

## Data

Today we'll analyze spending patterns in a Chicago program the allows city council representatives to fund local projects related to neighborhood  improvement. Projects could involve fixing sidewalks, potholes, adding public art, or many similar activities.

Our data comes from [this repository](https://github.com/jakejsmith/ChicagoMenuMoney).

:::{.callout-note}
For additional information, see [this city of Chiago website](https://www.chicago.gov/city/en/depts/obm/provdrs/cap_improve/svcs/aldermanic-menu-program.html).
:::

```{r}
funds <- read_csv("../data/chicago_spending.csv")

funds |> glimpse()
```

### Variables

See the [data dictionary](https://github.com/jakejsmith/ChicagoMenuMoney/blob/main/data-dictionary.md) for more information.

| Column      | Data Type | Description                                                                 |
|-------------|-----------|-----------------------------------------------------------------------------|
| `year`        | double    | Project year                                                               |
| `ward`        | double    | Neighborhood identifier (a political unit - there's one city council representative from each ward.) |
| `cost`        | character | Money spent on project                                                     |
| `category`    | character | Type of project                                                            |
| `program`     | character | Specific type of project or funding source                                 |
| `description` | character | Location and further notes                                                 |

## Data cleaning

### Converting `cost`

The most obvious problem with this dataset is that `cost` is a `<chr>` column. That happens because the dollar amounts are formatted like so: `"$6354"`

Convert these dollar amounts into `<dbl>` types so that we can use the numbers. There are a lot of different ways of doing this, but one of the easiest and best is `parse_number`.

[Read the documentation for `parse_number`](https://readr.tidyverse.org/reference/parse_number.html), then:

1. Use `parse_number` to clean the `cost` column.
2. Keep only `year`, `ward`, `cost`, and `category` for further analysis.
3. Overwrite `funds` with the updated version.
4. Print five random rows from `funds` using `slice_sample(n = 5)`.

```{r}
#| label: q-parse-number

funds <- funds |>
  mutate(cost = parse_number(cost)) |>
  select(year, ward, cost, category)

funds |>
  slice_sample(n = 5)
```

### Describe columns

Explore the data to identify any issues:

- Investigate the range of each variable.
- Check for missing or impossible values.
- Make decisions about whether to remove or transform any problematic values.

You may use any combination of tables, data visualizations, or other outputs to help you.

Identify any additional data cleaning steps that might be necessary based on your analyses. For example, if one of the `year` values were `203`, that is a data-entry issue, not an indication that the city of Chicago was doing public works during the reign of Emperor Septimius Severus.

Besides implausible values, another common issue that you will want to check for is missing data. You can use `is.na` in combination with other functions to look for missing values. Here's a line that could be useful:

```r
filter(if_any(everything(), is.na))
```

Here, `everything()` evaluates all columns against `is.na`.

```{r}
#| label: q-description

funds |>
  count(year)

funds |>
  count(ward)

funds |>
  count(category) |>
  arrange(desc(n))

funds |>
  arrange(desc(cost))

funds |>
  filter(if_any(everything(), is.na))

funds <- funds |>
  mutate(cost = if_else(cost < 0, NA, cost))
```

Compare with classmates to see if you agree on which further data cleaning steps are necessary.

## Analysis

### Total expenditures

Compute the total and proportional amount of money spent by project category. Store these values in a new table.

```{r}
#| label: q-expenditure-table

funds |>
  group_by(category) |>
  summarize(total_cost = sum(cost, na.rm = TRUE)) |>
  mutate(prop_cost = total_cost / sum(total_cost, na.rm = TRUE)) |>
  arrange(desc(total_cost))
```

### Raw annual expenditures

Visualize annual expenditures by category. In the example, I use a stacked bar chart, which can be created with this geom:

```r
geom_col(position = "stack")
```

If you are trying to match my graph exactly, you can match the color palette with this line:

```r
scale_fill_brewer(palette = "Set3")
```

```{r}
#| label: q-expenditures-viz

funds |>
  group_by(year, category) |>
  summarize(total_cost = sum(cost, na.rm = TRUE)) |>
  ggplot(aes(
    x = as_factor(year),
    y = total_cost,
    fill = category
  )) +
  geom_col(position = "stack") +
  scale_fill_brewer(palette = "Set3")
```

### Proportional annual expenditures

Although this view of the Chicago budget is relatively similar year after year, it is often helpful to see **proportional** expenditures to compare years directly. Compare proportions of total spending by category each year. This helps highlight whether certain categories dominated in specific years.

```{r}
#| label: q-expenditures-prop

funds |>
  group_by(year, category) |>
  summarize(total_cost = sum(cost, na.rm = TRUE), .groups = "drop") |>
  group_by(year) |>
  mutate(prop_cost = total_cost / sum(total_cost, na.rm = TRUE)) |>
  ggplot(aes(
    x = as_factor(year),
    y = prop_cost,
    fill = category
  )) +
  geom_col(position = "stack") +
  scale_fill_brewer(palette = "Set3")
```

When working with proportional data, an **area chart** can often make trends clearer. Switch the geom of your previous chart to:

```r
geom_area(position = "stack")
```

```{r}
#| label: q-expenditures-area

funds |>
  group_by(year, category) |>
  summarize(total_cost = sum(cost, na.rm = TRUE), .groups = "drop") |>
  group_by(year) |>
  mutate(prop_cost = total_cost / sum(total_cost, na.rm = TRUE)) |>
  ggplot(aes(
    x = year,
    y = prop_cost,
    fill = category
  )) +
  geom_area(position = "stack") +
  scale_fill_brewer(palette = "Set3")
```

### Rich wards, poor wards?

Here, we check whether funds were allocated fairly among wards.

1. Calculate total spending per ward (summing across all years).
2. Compute the mean (`mean()`) and standard deviation (`sd()`) of the total amounts.

:::{.callout-tip}
Don't forget about `ungroup()`
:::

```{r}
#| label: q-ward-inequality

funds |>
  group_by(ward) |>
  summarize(total_spend = sum(cost)) |>
  filter(!is.na(total_spend)) |>
  ungroup() |>
  summarize(
    mean_total_spend = mean(total_spend),
    sd_total_spend = sd(total_spend)
  )
```

At least according to this dataset, Chicago spends this money fairly equitably across wards.

### Ward outliers by category

Identify any wards that appear to be outliers in terms of their total spending in each project category.

1. Calculate total spending by ward and category.
2. Compute the interquartile range ($IQR$), first quartile ($Q1$), and third quartile ($Q3$) for each category’s total spending across all wards.
3. Flag any ward whose spending in that category is $≥ Q3 + 1.5 × IQR$ as a potential outlier.
4. Sort outliers by how much they exceed that threshold.

You could calculate the first quartile (i.e., the first 25%) like so:

```r
Q1 = quantile(total_expenditure, 0.25)
```

The IQR is the difference between the third and first quartiles.

:::{.callout-tip}
Rather than doing this all in one pipeline, it may be easier to assign outputs to objects (`<-`) along the way.
:::

```{r}
#| label: q-outliers


ward_spending <- funds |>
  group_by(category, ward) |>
  summarize(total_spend = sum(cost, na.rm = TRUE), .groups = "drop")

ward_outliers <- ward_spending |>
  group_by(category) |>
  mutate(
    Q1 = quantile(total_spend, 0.25),
    Q3 = quantile(total_spend, 0.75),
    IQR = Q3 - Q1,
    upper_bound = Q3 + 1.5 * IQR
  ) |>
  filter(total_spend >= upper_bound) |>
  ungroup()

ward_outliers |>
  mutate(spend_over_upper = total_spend - upper_bound) |>
  arrange(desc(spend_over_upper))
```

### Security cameras

Which ward received the most funding for security cameras?

```{r}
#| label: q-cameras

funds |>
  filter(category == "Security Cameras") |>
  group_by(ward) |>
  summarize(total_spend = sum(cost)) |>
  arrange(desc(total_spend))
```

Take a look at the [map](https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-Wards-2015-2023-/sp34-6z76) and see if you can figure out why some of these wards might be outliers on these dimensions.

Ward 42 is the [Chicago Loop](https://en.wikipedia.org/wiki/Chicago_Loop).

### Spending equity

How evenly is funding distributed across wards?

1. Calculate total expenditures (`total_spending`) across all wards.
2. Count the number of wards (`n_wards`).
3. Determine expected spending if funds were distributed equally.
4. Create a histogram showing how each ward's spending compares to the expected value.

```{r}
#| label: q-ward-spending


total_spending <- funds |>
  summarize(total_cost = sum(cost, na.rm = TRUE)) |>
  pull(total_cost)

ward_spending <- funds |>
  group_by(ward) |>
  summarize(ward_total = sum(cost, na.rm = TRUE), .groups = "drop")

n_wards <- funds |>
  summarize(max_ward = max(ward)) |>
  pull(max_ward)
expected_spending <- total_spending / n_wards

ward_spending <- ward_spending |>
  mutate(
    expected_spend = expected_spending,
    deviation = ward_total - expected_spend
  ) |>
  arrange(desc(deviation))

ward_spending |>
  ggplot(aes(
    x = fct_reorder(factor(ward), deviation),
    y = deviation,
    fill = deviation
  )) +
  geom_col() +
  scale_fill_viridis_c() +
  labs(
    title = "Deviation of Wards' Spending from Expected",
    subtitle = "Positive values indicate overspending, negative values indicate underspending",
    x = "Ward",
    y = "Spending Deviation (Actual - Expected)"
  ) +
  theme(axis.text.x = element_text(angle = 90))
```

On this chart, it turns out that the only significant outlier is Ward 34, which received about $1 million less than we would expect if the money were distributed evenly.
